/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RLPUtilInterface extends ethers.utils.Interface {
  functions: {
    "toAddress(string,address)": FunctionFragment;
    "toBool(string,bool)": FunctionFragment;
    "toInt(string,int256)": FunctionFragment;
    "toList(bytes[])": FunctionFragment;
    "toString(string,string)": FunctionFragment;
    "toUint(string,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "toAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "toBool",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "toInt",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "toList", values: [BytesLike[]]): string;
  encodeFunctionData(
    functionFragment: "toString",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "toUint",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "toAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toBool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toInt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toString", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toUint", data: BytesLike): Result;

  events: {};
}

export class RLPUtil extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RLPUtilInterface;

  functions: {
    toAddress(
      name: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    toBool(
      name: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<[string]>;

    toInt(
      name: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    toList(
      bytesList: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[string]>;

    toString(
      name: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    toUint(
      name: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  toAddress(
    name: string,
    value: string,
    overrides?: CallOverrides
  ): Promise<string>;

  toBool(
    name: string,
    value: boolean,
    overrides?: CallOverrides
  ): Promise<string>;

  toInt(
    name: string,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  toList(bytesList: BytesLike[], overrides?: CallOverrides): Promise<string>;

  toString(
    name: string,
    value: string,
    overrides?: CallOverrides
  ): Promise<string>;

  toUint(
    name: string,
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    toAddress(
      name: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<string>;

    toBool(
      name: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    toInt(
      name: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    toList(bytesList: BytesLike[], overrides?: CallOverrides): Promise<string>;

    toString(
      name: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<string>;

    toUint(
      name: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    toAddress(
      name: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toBool(
      name: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toInt(
      name: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toList(
      bytesList: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toString(
      name: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toUint(
      name: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    toAddress(
      name: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toBool(
      name: string,
      value: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toInt(
      name: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toList(
      bytesList: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toString(
      name: string,
      value: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toUint(
      name: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
