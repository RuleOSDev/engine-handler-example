/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { RLPUtil, RLPUtilInterface } from "../RLPUtil";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "address",
        name: "value",
        type: "address",
      },
    ],
    name: "toAddress",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "bool",
        name: "value",
        type: "bool",
      },
    ],
    name: "toBool",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "int256",
        name: "value",
        type: "int256",
      },
    ],
    name: "toInt",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "bytesList",
        type: "bytes[]",
      },
    ],
    name: "toList",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "value",
        type: "string",
      },
    ],
    name: "toString",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "toUint",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x610fce61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c80633570a5e6146100715780635d5bf4d21461009a57806360353f57146100ad5780637fe75a27146100c0578063e4fe64be146100d3578063f0197752146100e6575b600080fd5b61008461007f366004610b5a565b6100f9565b6040516100919190610b9e565b60405180910390f35b6100846100a8366004610bf3565b6101d4565b6100846100bb366004610cca565b6101e8565b6100846100ce366004610d2d565b610286565b6100846100e1366004610b5a565b610325565b6100846100f4366004610d8a565b6103c0565b606060006101068461045c565b9050600061011384610467565b6040805160038082526080820190925291925060009190816020015b606081526020019060019003908161012f579050509050828160008151811061015a5761015a610dd5565b6020026020010181905250604051806040016040528060048152602001631d5a5b9d60e21b8152508160018151811061019557610195610dd5565b602002602001018190525081816002815181106101b4576101b4610dd5565b60200260200101819052506101c88161047a565b93505050505b92915050565b606060006101e18361047a565b9392505050565b606060006101f58461045c565b905060006102028461045c565b6040805160038082526080820190925291925060009190816020015b606081526020019060019003908161021e579050509050828160008151811061024957610249610dd5565b602002602001018190525060405180604001604052806006815260200165737472696e6760d01b8152508160018151811061019557610195610dd5565b606060006102938461045c565b905060006102a08461049e565b6040805160038082526080820190925291925060009190816020015b60608152602001906001900390816102bc57905050905082816000815181106102e7576102e7610dd5565b6020026020010181905250604051806040016040528060078152602001666164647265737360c81b8152508160018151811061019557610195610dd5565b606060006103328461045c565b9050600061033f846104c1565b6040805160038082526080820190925291925060009190816020015b606081526020019060019003908161035b579050509050828160008151811061038657610386610dd5565b6020026020010181905250604051806040016040528060038152602001621a5b9d60ea1b8152508160018151811061019557610195610dd5565b606060006103cd8461045c565b905060006103da846104cc565b6040805160038082526080820190925291925060009190816020015b60608152602001906001900390816103f6579050509050828160008151811061042157610421610dd5565b602002602001018190525060405180604001604052806004815260200163189bdbdb60e21b8152508160018151811061019557610195610dd5565b60606101ce82610536565b60606101ce61047583610586565b610536565b60606000610487836106c3565b90506101e1610498825160c06107f2565b826109a8565b60408051600560a21b83186014820152603481019091526060906101e181610536565b60606101ce82610467565b604080516001808252818301909252606091600091906020820181803683370190505090508261050057600160ff1b610506565b600160f81b5b8160008151811061051957610519610dd5565b60200101906001600160f81b031916908160001a90535092915050565b60608082516001148015610565575060808360008151811061055a5761055a610dd5565b016020015160f81c11155b156105715750816101ce565b6101e1610580845160806107f2565b846109a8565b6040805160208082528183019092526060916000919060208201818036833701905050905082602082015260005b60208110156105fa578181815181106105cf576105cf610dd5565b01602001516001600160f81b031916156105e8576105fa565b806105f281610e01565b9150506105b4565b6000610607826020610e1c565b6001600160401b0381111561061e5761061e610a9d565b6040519080825280601f01601f191660200182016040528015610648576020820181803683370190505b50905060005b81518110156106ba57838361066281610e01565b94508151811061067457610674610dd5565b602001015160f81c60f81b82828151811061069157610691610dd5565b60200101906001600160f81b031916908160001a905350806106b281610e01565b91505061064e565b50949350505050565b60608151600014156106e357505060408051600081526020810190915290565b6000805b835181101561072a5783818151811061070257610702610dd5565b602002602001015151826107169190610e33565b91508061072281610e01565b9150506106e7565b6000826001600160401b0381111561074457610744610a9d565b6040519080825280601f01601f19166020018201604052801561076e576020820181803683370190505b50600092509050602081015b85518310156106ba57600086848151811061079757610797610dd5565b6020026020010151905060006020820190506107b583828451610a25565b8785815181106107c7576107c7610dd5565b602002602001015151836107db9190610e33565b9250505082806107ea90610e01565b93505061077a565b606080603884101561085c57604080516001808252818301909252906020820181803683370190505090506108278385610e33565b601f1a60f81b8160008151811061084057610840610dd5565b60200101906001600160f81b031916908160001a9053506101e1565b600060015b61086b8187610e61565b15610891578161087a81610e01565b925061088a905061010082610e75565b9050610861565b61089c826001610e33565b6001600160401b038111156108b3576108b3610a9d565b6040519080825280601f01601f1916602001820160405280156108dd576020820181803683370190505b5092506108ea8583610e33565b6108f5906037610e33565b601f1a60f81b8360008151811061090e5761090e610dd5565b60200101906001600160f81b031916908160001a905350600190505b81811161099f5761010061093e8284610e1c565b61094a90610100610f78565b6109549088610e61565b61095e9190610f84565b601f1a60f81b83828151811061097657610976610dd5565b60200101906001600160f81b031916908160001a9053508061099781610e01565b91505061092a565b50509392505050565b6060806040519050835180825260208201818101602087015b818310156109d95780518352602092830192016109c1565b50855184518101855292509050808201602086015b81831015610a065780518352602092830192016109ee565b508651929092011591909101601f01601f191660405250905092915050565b8282825b60208110610a615781518352610a40602084610e33565b9250610a4d602083610e33565b9150610a5a602082610e1c565b9050610a29565b60006001610a70836020610e1c565b610a7c90610100610f78565b610a869190610e1c565b925184518416931916929092179092525050505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610adb57610adb610a9d565b604052919050565b60006001600160401b03831115610afc57610afc610a9d565b610b0f601f8401601f1916602001610ab3565b9050828152838383011115610b2357600080fd5b828260208301376000602084830101529392505050565b600082601f830112610b4b57600080fd5b6101e183833560208501610ae3565b60008060408385031215610b6d57600080fd5b82356001600160401b03811115610b8357600080fd5b610b8f85828601610b3a565b95602094909401359450505050565b600060208083528351808285015260005b81811015610bcb57858101830151858201604001528201610baf565b81811115610bdd576000604083870101525b50601f01601f1916929092016040019392505050565b60006020808385031215610c0657600080fd5b82356001600160401b0380821115610c1d57600080fd5b818501915085601f830112610c3157600080fd5b813581811115610c4357610c43610a9d565b8060051b610c52858201610ab3565b9182528381018501918581019089841115610c6c57600080fd5b86860192505b83831015610cbd57823585811115610c8a5760008081fd5b8601603f81018b13610c9c5760008081fd5b610cad8b8983013560408401610ae3565b8352509186019190860190610c72565b9998505050505050505050565b60008060408385031215610cdd57600080fd5b82356001600160401b0380821115610cf457600080fd5b610d0086838701610b3a565b93506020850135915080821115610d1657600080fd5b50610d2385828601610b3a565b9150509250929050565b60008060408385031215610d4057600080fd5b82356001600160401b03811115610d5657600080fd5b610d6285828601610b3a565b92505060208301356001600160a01b0381168114610d7f57600080fd5b809150509250929050565b60008060408385031215610d9d57600080fd5b82356001600160401b03811115610db357600080fd5b610dbf85828601610b3a565b92505060208301358015158114610d7f57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610e1557610e15610deb565b5060010190565b600082821015610e2e57610e2e610deb565b500390565b60008219821115610e4657610e46610deb565b500190565b634e487b7160e01b600052601260045260246000fd5b600082610e7057610e70610e4b565b500490565b6000816000190483118215151615610e8f57610e8f610deb565b500290565b600181815b80851115610ecf578160001904821115610eb557610eb5610deb565b80851615610ec257918102915b93841c9390800290610e99565b509250929050565b600082610ee6575060016101ce565b81610ef3575060006101ce565b8160018114610f095760028114610f1357610f2f565b60019150506101ce565b60ff841115610f2457610f24610deb565b50506001821b6101ce565b5060208310610133831016604e8410600b8410161715610f52575081810a6101ce565b610f5c8383610e94565b8060001904821115610f7057610f70610deb565b029392505050565b60006101e18383610ed7565b600082610f9357610f93610e4b565b50069056fea2646970667358221220eee0c3422e2ec29c52d1d64a790e34722b913b7122e064e21b26b2863ac513ee64736f6c63430008080033";

export class RLPUtil__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RLPUtil> {
    return super.deploy(overrides || {}) as Promise<RLPUtil>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RLPUtil {
    return super.attach(address) as RLPUtil;
  }
  connect(signer: Signer): RLPUtil__factory {
    return super.connect(signer) as RLPUtil__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RLPUtilInterface {
    return new utils.Interface(_abi) as RLPUtilInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RLPUtil {
    return new Contract(address, _abi, signerOrProvider) as RLPUtil;
  }
}
