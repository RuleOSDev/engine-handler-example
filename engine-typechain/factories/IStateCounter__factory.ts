/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { IStateCounter, IStateCounterInterface } from "../IStateCounter";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "caller",
            type: "address",
          },
          {
            internalType: "address",
            name: "clusterArea",
            type: "address",
          },
          {
            internalType: "address",
            name: "lastHandler",
            type: "address",
          },
          {
            internalType: "address",
            name: "snippet",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "valueTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "taskId",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "parentTaskId",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "clusterId",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "state",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "erc",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "id",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "uint32",
                    name: "attrId",
                    type: "uint32",
                  },
                  {
                    internalType: "int40",
                    name: "attrAmount",
                    type: "int40",
                  },
                ],
                internalType: "struct Attribute.AttributeIn[]",
                name: "attrInList",
                type: "tuple[]",
              },
            ],
            internalType: "struct Token.Token[]",
            name: "inTokenList",
            type: "tuple[]",
          },
          {
            internalType: "bytes",
            name: "args",
            type: "bytes",
          },
        ],
        internalType: "struct Task.Task",
        name: "task",
        type: "tuple",
      },
    ],
    name: "add",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "cname",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "taskId",
        type: "uint32",
      },
    ],
    name: "get",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "caller",
            type: "address",
          },
          {
            internalType: "address",
            name: "clusterArea",
            type: "address",
          },
          {
            internalType: "address",
            name: "lastHandler",
            type: "address",
          },
          {
            internalType: "address",
            name: "snippet",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "valueTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "taskId",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "parentTaskId",
            type: "uint32",
          },
          {
            internalType: "uint32",
            name: "clusterId",
            type: "uint32",
          },
          {
            internalType: "uint8",
            name: "state",
            type: "uint8",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "erc",
                type: "uint8",
              },
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "id",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                components: [
                  {
                    internalType: "uint32",
                    name: "attrId",
                    type: "uint32",
                  },
                  {
                    internalType: "int40",
                    name: "attrAmount",
                    type: "int40",
                  },
                ],
                internalType: "struct Attribute.AttributeIn[]",
                name: "attrInList",
                type: "tuple[]",
              },
            ],
            internalType: "struct Token.Token[]",
            name: "inTokenList",
            type: "tuple[]",
          },
          {
            internalType: "bytes",
            name: "args",
            type: "bytes",
          },
        ],
        internalType: "struct Task.Task",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentTaskId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "taskId",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "lastHandler",
        type: "address",
      },
      {
        internalType: "uint8",
        name: "state",
        type: "uint8",
      },
    ],
    name: "process",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "taskId",
        type: "uint32",
      },
      {
        internalType: "int32",
        name: "delayTime",
        type: "int32",
      },
    ],
    name: "updateExecuteDelayTime",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "taskId",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "state",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "timestamp",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "blockNumber",
        type: "uint32",
      },
    ],
    name: "updateTime",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

export class IStateCounter__factory {
  static readonly abi = _abi;
  static createInterface(): IStateCounterInterface {
    return new utils.Interface(_abi) as IStateCounterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IStateCounter {
    return new Contract(address, _abi, signerOrProvider) as IStateCounter;
  }
}
