/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TokenHandlerUtilInterface extends ethers.utils.Interface {
  functions: {
    "processTokenHandler(uint8,(address,address,address,address,uint256,uint256,uint32,uint32,uint32,uint8,tuple[],bytes),uint8,((uint8,address,uint256[]),uint8,address[],uint256[]),(uint8,uint8,uint8,uint8,uint24,uint32,uint256,uint256,uint256,uint8,uint256[],uint256[],uint8[],address[]))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "processTokenHandler",
    values: [
      BigNumberish,
      {
        caller: string;
        clusterArea: string;
        lastHandler: string;
        snippet: string;
        valueTime: BigNumberish;
        value: BigNumberish;
        taskId: BigNumberish;
        parentTaskId: BigNumberish;
        clusterId: BigNumberish;
        state: BigNumberish;
        inTokenList: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        }[];
        args: BytesLike;
      },
      BigNumberish,
      {
        tokenTemplate: {
          erc: BigNumberish;
          token: string;
          valueList: BigNumberish[];
        };
        rule: BigNumberish;
        ioAddressList: string[];
        valueList: BigNumberish[];
      },
      {
        inBranch: BigNumberish;
        inBranchProcess: BigNumberish;
        outBranch: BigNumberish;
        outBranchProcess: BigNumberish;
        times: BigNumberish;
        multiple: BigNumberish;
        random: BigNumberish;
        ratio: BigNumberish;
        ratioDenominator: BigNumberish;
        tokenCount: BigNumberish;
        tokenIdList: BigNumberish[];
        tokenAmountList: BigNumberish[];
        tokenIndexList: BigNumberish[];
        outAddressList: string[];
      }
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "processTokenHandler",
    data: BytesLike
  ): Result;

  events: {};
}

export class TokenHandlerUtil extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TokenHandlerUtilInterface;

  functions: {
    processTokenHandler(
      mode: BigNumberish,
      task: {
        caller: string;
        clusterArea: string;
        lastHandler: string;
        snippet: string;
        valueTime: BigNumberish;
        value: BigNumberish;
        taskId: BigNumberish;
        parentTaskId: BigNumberish;
        clusterId: BigNumberish;
        state: BigNumberish;
        inTokenList: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        }[];
        args: BytesLike;
      },
      tokenSlotIndex: BigNumberish,
      stdTokenSlotOutput: {
        tokenTemplate: {
          erc: BigNumberish;
          token: string;
          valueList: BigNumberish[];
        };
        rule: BigNumberish;
        ioAddressList: string[];
        valueList: BigNumberish[];
      },
      tokenBranchParams: {
        inBranch: BigNumberish;
        inBranchProcess: BigNumberish;
        outBranch: BigNumberish;
        outBranchProcess: BigNumberish;
        times: BigNumberish;
        multiple: BigNumberish;
        random: BigNumberish;
        ratio: BigNumberish;
        ratioDenominator: BigNumberish;
        tokenCount: BigNumberish;
        tokenIdList: BigNumberish[];
        tokenAmountList: BigNumberish[];
        tokenIndexList: BigNumberish[];
        outAddressList: string[];
      },
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber] & {
          id: BigNumber;
          amount: BigNumber;
          idIndex: BigNumber;
        }
      ]
    >;
  };

  processTokenHandler(
    mode: BigNumberish,
    task: {
      caller: string;
      clusterArea: string;
      lastHandler: string;
      snippet: string;
      valueTime: BigNumberish;
      value: BigNumberish;
      taskId: BigNumberish;
      parentTaskId: BigNumberish;
      clusterId: BigNumberish;
      state: BigNumberish;
      inTokenList: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
      }[];
      args: BytesLike;
    },
    tokenSlotIndex: BigNumberish,
    stdTokenSlotOutput: {
      tokenTemplate: {
        erc: BigNumberish;
        token: string;
        valueList: BigNumberish[];
      };
      rule: BigNumberish;
      ioAddressList: string[];
      valueList: BigNumberish[];
    },
    tokenBranchParams: {
      inBranch: BigNumberish;
      inBranchProcess: BigNumberish;
      outBranch: BigNumberish;
      outBranchProcess: BigNumberish;
      times: BigNumberish;
      multiple: BigNumberish;
      random: BigNumberish;
      ratio: BigNumberish;
      ratioDenominator: BigNumberish;
      tokenCount: BigNumberish;
      tokenIdList: BigNumberish[];
      tokenAmountList: BigNumberish[];
      tokenIndexList: BigNumberish[];
      outAddressList: string[];
    },
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      id: BigNumber;
      amount: BigNumber;
      idIndex: BigNumber;
    }
  >;

  callStatic: {
    processTokenHandler(
      mode: BigNumberish,
      task: {
        caller: string;
        clusterArea: string;
        lastHandler: string;
        snippet: string;
        valueTime: BigNumberish;
        value: BigNumberish;
        taskId: BigNumberish;
        parentTaskId: BigNumberish;
        clusterId: BigNumberish;
        state: BigNumberish;
        inTokenList: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        }[];
        args: BytesLike;
      },
      tokenSlotIndex: BigNumberish,
      stdTokenSlotOutput: {
        tokenTemplate: {
          erc: BigNumberish;
          token: string;
          valueList: BigNumberish[];
        };
        rule: BigNumberish;
        ioAddressList: string[];
        valueList: BigNumberish[];
      },
      tokenBranchParams: {
        inBranch: BigNumberish;
        inBranchProcess: BigNumberish;
        outBranch: BigNumberish;
        outBranchProcess: BigNumberish;
        times: BigNumberish;
        multiple: BigNumberish;
        random: BigNumberish;
        ratio: BigNumberish;
        ratioDenominator: BigNumberish;
        tokenCount: BigNumberish;
        tokenIdList: BigNumberish[];
        tokenAmountList: BigNumberish[];
        tokenIndexList: BigNumberish[];
        outAddressList: string[];
      },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        id: BigNumber;
        amount: BigNumber;
        idIndex: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    processTokenHandler(
      mode: BigNumberish,
      task: {
        caller: string;
        clusterArea: string;
        lastHandler: string;
        snippet: string;
        valueTime: BigNumberish;
        value: BigNumberish;
        taskId: BigNumberish;
        parentTaskId: BigNumberish;
        clusterId: BigNumberish;
        state: BigNumberish;
        inTokenList: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        }[];
        args: BytesLike;
      },
      tokenSlotIndex: BigNumberish,
      stdTokenSlotOutput: {
        tokenTemplate: {
          erc: BigNumberish;
          token: string;
          valueList: BigNumberish[];
        };
        rule: BigNumberish;
        ioAddressList: string[];
        valueList: BigNumberish[];
      },
      tokenBranchParams: {
        inBranch: BigNumberish;
        inBranchProcess: BigNumberish;
        outBranch: BigNumberish;
        outBranchProcess: BigNumberish;
        times: BigNumberish;
        multiple: BigNumberish;
        random: BigNumberish;
        ratio: BigNumberish;
        ratioDenominator: BigNumberish;
        tokenCount: BigNumberish;
        tokenIdList: BigNumberish[];
        tokenAmountList: BigNumberish[];
        tokenIndexList: BigNumberish[];
        outAddressList: string[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    processTokenHandler(
      mode: BigNumberish,
      task: {
        caller: string;
        clusterArea: string;
        lastHandler: string;
        snippet: string;
        valueTime: BigNumberish;
        value: BigNumberish;
        taskId: BigNumberish;
        parentTaskId: BigNumberish;
        clusterId: BigNumberish;
        state: BigNumberish;
        inTokenList: {
          erc: BigNumberish;
          token: string;
          id: BigNumberish;
          amount: BigNumberish;
          attrInList: { attrId: BigNumberish; attrAmount: BigNumberish }[];
        }[];
        args: BytesLike;
      },
      tokenSlotIndex: BigNumberish,
      stdTokenSlotOutput: {
        tokenTemplate: {
          erc: BigNumberish;
          token: string;
          valueList: BigNumberish[];
        };
        rule: BigNumberish;
        ioAddressList: string[];
        valueList: BigNumberish[];
      },
      tokenBranchParams: {
        inBranch: BigNumberish;
        inBranchProcess: BigNumberish;
        outBranch: BigNumberish;
        outBranchProcess: BigNumberish;
        times: BigNumberish;
        multiple: BigNumberish;
        random: BigNumberish;
        ratio: BigNumberish;
        ratioDenominator: BigNumberish;
        tokenCount: BigNumberish;
        tokenIdList: BigNumberish[];
        tokenAmountList: BigNumberish[];
        tokenIndexList: BigNumberish[];
        outAddressList: string[];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
