/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IExchangeInterface extends ethers.utils.Interface {
  functions: {
    "cancelBatchBuyOrder(uint256[])": FunctionFragment;
    "cancelBatchSellOrder(uint256[])": FunctionFragment;
    "cname()": FunctionFragment;
    "currentBuyIndex()": FunctionFragment;
    "currentSellIndex()": FunctionFragment;
    "makeBatchBuyOrder(tuple[])": FunctionFragment;
    "makeBatchSellOrder(tuple[])": FunctionFragment;
    "matchBatchOrder(uint256[],uint256[])": FunctionFragment;
    "matchOrder(uint256,uint256)": FunctionFragment;
    "pause(uint8,bool)": FunctionFragment;
    "setBatchOrderCount(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setServiceFeeRate(address,uint256)": FunctionFragment;
    "setTokenRoyaltyRate(address,uint256)": FunctionFragment;
    "takeBatchBuyOrder(uint256[],tuple[])": FunctionFragment;
    "takeBatchSellOrder(uint256[],tuple[])": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelBatchBuyOrder",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBatchSellOrder",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "cname", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentBuyIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSellIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeBatchBuyOrder",
    values: [
      {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeBatchSellOrder",
    values: [
      {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "matchBatchOrder",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "matchOrder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pause",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBatchOrderCount",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setServiceFeeRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenRoyaltyRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "takeBatchBuyOrder",
    values: [
      BigNumberish[],
      {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "takeBatchSellOrder",
    values: [
      BigNumberish[],
      {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "cancelBatchBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelBatchSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cname", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentBuyIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSellIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeBatchBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeBatchSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchBatchOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "matchOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBatchOrderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setServiceFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenRoyaltyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeBatchBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeBatchSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Buy(tuple,uint256)": EventFragment;
    "CancelBuy(tuple,uint256)": EventFragment;
    "CancelSell(tuple,uint256)": EventFragment;
    "MatchOrder(tuple,uint256,uint256)": EventFragment;
    "Sell(tuple,uint256)": EventFragment;
    "SetServiceFeeRate(address,uint256)": EventFragment;
    "SetTokenRoyaltyRate(address,uint256)": EventFragment;
    "TakeBuy(tuple,uint256,tuple)": EventFragment;
    "TakeSell(tuple,uint256,tuple)": EventFragment;
    "TransferValues(uint256,address,uint256,uint256,address,address,uint256,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelBuy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelSell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MatchOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetServiceFeeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenRoyaltyRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeBuy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeSell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferValues"): EventFragment;
}

export type BuyEvent = TypedEvent<
  [
    [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    },
    BigNumber
  ] & {
    token: [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    };
    buyIndex: BigNumber;
  }
>;

export type CancelBuyEvent = TypedEvent<
  [
    [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    },
    BigNumber
  ] & {
    token: [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    };
    buyIndex: BigNumber;
  }
>;

export type CancelSellEvent = TypedEvent<
  [
    [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    },
    BigNumber
  ] & {
    token: [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    };
    sellIndex: BigNumber;
  }
>;

export type MatchOrderEvent = TypedEvent<
  [
    [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    },
    BigNumber,
    BigNumber
  ] & {
    token: [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    };
    buyIndex: BigNumber;
    sellIndex: BigNumber;
  }
>;

export type SellEvent = TypedEvent<
  [
    [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    },
    BigNumber
  ] & {
    token: [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    };
    sellIndex: BigNumber;
  }
>;

export type SetServiceFeeRateEvent = TypedEvent<
  [string, BigNumber] & { serviceFeeAddr: string; serviceFeeRate: BigNumber }
>;

export type SetTokenRoyaltyRateEvent = TypedEvent<
  [string, BigNumber] & { token: string; royaltyRate: BigNumber }
>;

export type TakeBuyEvent = TypedEvent<
  [
    [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    },
    BigNumber,
    [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    }
  ] & {
    orderToken: [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    };
    buyIndex: BigNumber;
    token: [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    };
  }
>;

export type TakeSellEvent = TypedEvent<
  [
    [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    },
    BigNumber,
    [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    }
  ] & {
    orderToken: [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    };
    sellIndex: BigNumber;
    token: [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    };
  }
>;

export type TransferValuesEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    tokenPrice: BigNumber;
    serviceFeeAddress: string;
    serviceFeeRate: BigNumber;
    serviceFee: BigNumber;
    token: string;
    deployer: string;
    royaltyRate: BigNumber;
    royalty: BigNumber;
    receiver: string;
    receiverTokenPrice: BigNumber;
  }
>;

export class IExchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IExchangeInterface;

  functions: {
    cancelBatchBuyOrder(
      buyIndexList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelBatchSellOrder(
      sellIndexList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cname(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentBuyIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentSellIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    makeBatchBuyOrder(
      tokens: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeBatchSellOrder(
      tokens: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    matchBatchOrder(
      buyIndexList: BigNumberish[],
      sellIndexList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    matchOrder(
      buyIndex: BigNumberish,
      sellIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      channel: BigNumberish,
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBatchOrderCount(
      batchBuyOrderCount_: BigNumberish,
      batchSellOrderCount_: BigNumberish,
      cancelBuyOrderCount_: BigNumberish,
      cancelSellOrderCount_: BigNumberish,
      takeBuyOrderCount_: BigNumberish,
      takeSellOrderCount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setServiceFeeRate(
      _serviceFeeAddr: string,
      _serviceFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenRoyaltyRate(
      contractAddr: string,
      royaltyRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeBatchBuyOrder(
      buyIndexList: BigNumberish[],
      tokenList: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeBatchSellOrder(
      sellIndexList: BigNumberish[],
      tokenList: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  cancelBatchBuyOrder(
    buyIndexList: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelBatchSellOrder(
    sellIndexList: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cname(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentBuyIndex(overrides?: CallOverrides): Promise<BigNumber>;

  currentSellIndex(overrides?: CallOverrides): Promise<BigNumber>;

  makeBatchBuyOrder(
    tokens: {
      erc: BigNumberish;
      token: string;
      id: BigNumberish;
      amount: BigNumberish;
      price: BigNumberish;
    }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeBatchSellOrder(
    tokens: {
      erc: BigNumberish;
      token: string;
      id: BigNumberish;
      amount: BigNumberish;
      price: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  matchBatchOrder(
    buyIndexList: BigNumberish[],
    sellIndexList: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  matchOrder(
    buyIndex: BigNumberish,
    sellIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    channel: BigNumberish,
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBatchOrderCount(
    batchBuyOrderCount_: BigNumberish,
    batchSellOrderCount_: BigNumberish,
    cancelBuyOrderCount_: BigNumberish,
    cancelSellOrderCount_: BigNumberish,
    takeBuyOrderCount_: BigNumberish,
    takeSellOrderCount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setServiceFeeRate(
    _serviceFeeAddr: string,
    _serviceFeeRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenRoyaltyRate(
    contractAddr: string,
    royaltyRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeBatchBuyOrder(
    buyIndexList: BigNumberish[],
    tokenList: {
      erc: BigNumberish;
      token: string;
      id: BigNumberish;
      amount: BigNumberish;
      price: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeBatchSellOrder(
    sellIndexList: BigNumberish[],
    tokenList: {
      erc: BigNumberish;
      token: string;
      id: BigNumberish;
      amount: BigNumberish;
      price: BigNumberish;
    }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    cancelBatchBuyOrder(
      buyIndexList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelBatchSellOrder(
      sellIndexList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cname(overrides?: CallOverrides): Promise<string>;

    currentBuyIndex(overrides?: CallOverrides): Promise<BigNumber>;

    currentSellIndex(overrides?: CallOverrides): Promise<BigNumber>;

    makeBatchBuyOrder(
      tokens: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeBatchSellOrder(
      tokens: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchBatchOrder(
      buyIndexList: BigNumberish[],
      sellIndexList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    matchOrder(
      buyIndex: BigNumberish,
      sellIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(
      channel: BigNumberish,
      _paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBatchOrderCount(
      batchBuyOrderCount_: BigNumberish,
      batchSellOrderCount_: BigNumberish,
      cancelBuyOrderCount_: BigNumberish,
      cancelSellOrderCount_: BigNumberish,
      takeBuyOrderCount_: BigNumberish,
      takeSellOrderCount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setServiceFeeRate(
      _serviceFeeAddr: string,
      _serviceFeeRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenRoyaltyRate(
      contractAddr: string,
      royaltyRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    takeBatchBuyOrder(
      buyIndexList: BigNumberish[],
      tokenList: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    takeBatchSellOrder(
      sellIndexList: BigNumberish[],
      tokenList: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Buy(tuple,uint256)"(
      token?: null,
      buyIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        buyIndex: BigNumber;
      }
    >;

    Buy(
      token?: null,
      buyIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        buyIndex: BigNumber;
      }
    >;

    "CancelBuy(tuple,uint256)"(
      token?: null,
      buyIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        buyIndex: BigNumber;
      }
    >;

    CancelBuy(
      token?: null,
      buyIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        buyIndex: BigNumber;
      }
    >;

    "CancelSell(tuple,uint256)"(
      token?: null,
      sellIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        sellIndex: BigNumber;
      }
    >;

    CancelSell(
      token?: null,
      sellIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        sellIndex: BigNumber;
      }
    >;

    "MatchOrder(tuple,uint256,uint256)"(
      token?: null,
      buyIndex?: null,
      sellIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber,
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        buyIndex: BigNumber;
        sellIndex: BigNumber;
      }
    >;

    MatchOrder(
      token?: null,
      buyIndex?: null,
      sellIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber,
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        buyIndex: BigNumber;
        sellIndex: BigNumber;
      }
    >;

    "Sell(tuple,uint256)"(
      token?: null,
      sellIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        sellIndex: BigNumber;
      }
    >;

    Sell(
      token?: null,
      sellIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        sellIndex: BigNumber;
      }
    >;

    "SetServiceFeeRate(address,uint256)"(
      serviceFeeAddr?: string | null,
      serviceFeeRate?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { serviceFeeAddr: string; serviceFeeRate: BigNumber }
    >;

    SetServiceFeeRate(
      serviceFeeAddr?: string | null,
      serviceFeeRate?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { serviceFeeAddr: string; serviceFeeRate: BigNumber }
    >;

    "SetTokenRoyaltyRate(address,uint256)"(
      token?: string | null,
      royaltyRate?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; royaltyRate: BigNumber }
    >;

    SetTokenRoyaltyRate(
      token?: string | null,
      royaltyRate?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; royaltyRate: BigNumber }
    >;

    "TakeBuy(tuple,uint256,tuple)"(
      orderToken?: null,
      buyIndex?: null,
      token?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber,
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        }
      ],
      {
        orderToken: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        buyIndex: BigNumber;
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
      }
    >;

    TakeBuy(
      orderToken?: null,
      buyIndex?: null,
      token?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber,
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        }
      ],
      {
        orderToken: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        buyIndex: BigNumber;
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
      }
    >;

    "TakeSell(tuple,uint256,tuple)"(
      orderToken?: null,
      sellIndex?: null,
      token?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber,
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        }
      ],
      {
        orderToken: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        sellIndex: BigNumber;
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
      }
    >;

    TakeSell(
      orderToken?: null,
      sellIndex?: null,
      token?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber,
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        }
      ],
      {
        orderToken: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        sellIndex: BigNumber;
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
      }
    >;

    "TransferValues(uint256,address,uint256,uint256,address,address,uint256,uint256,address,uint256)"(
      tokenPrice?: BigNumberish | null,
      serviceFeeAddress?: null,
      serviceFeeRate?: BigNumberish | null,
      serviceFee?: null,
      token?: null,
      deployer?: null,
      royaltyRate?: BigNumberish | null,
      royalty?: null,
      receiver?: null,
      receiverTokenPrice?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ],
      {
        tokenPrice: BigNumber;
        serviceFeeAddress: string;
        serviceFeeRate: BigNumber;
        serviceFee: BigNumber;
        token: string;
        deployer: string;
        royaltyRate: BigNumber;
        royalty: BigNumber;
        receiver: string;
        receiverTokenPrice: BigNumber;
      }
    >;

    TransferValues(
      tokenPrice?: BigNumberish | null,
      serviceFeeAddress?: null,
      serviceFeeRate?: BigNumberish | null,
      serviceFee?: null,
      token?: null,
      deployer?: null,
      royaltyRate?: BigNumberish | null,
      royalty?: null,
      receiver?: null,
      receiverTokenPrice?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ],
      {
        tokenPrice: BigNumber;
        serviceFeeAddress: string;
        serviceFeeRate: BigNumber;
        serviceFee: BigNumber;
        token: string;
        deployer: string;
        royaltyRate: BigNumber;
        royalty: BigNumber;
        receiver: string;
        receiverTokenPrice: BigNumber;
      }
    >;
  };

  estimateGas: {
    cancelBatchBuyOrder(
      buyIndexList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelBatchSellOrder(
      sellIndexList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cname(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentBuyIndex(overrides?: CallOverrides): Promise<BigNumber>;

    currentSellIndex(overrides?: CallOverrides): Promise<BigNumber>;

    makeBatchBuyOrder(
      tokens: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeBatchSellOrder(
      tokens: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    matchBatchOrder(
      buyIndexList: BigNumberish[],
      sellIndexList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    matchOrder(
      buyIndex: BigNumberish,
      sellIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      channel: BigNumberish,
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBatchOrderCount(
      batchBuyOrderCount_: BigNumberish,
      batchSellOrderCount_: BigNumberish,
      cancelBuyOrderCount_: BigNumberish,
      cancelSellOrderCount_: BigNumberish,
      takeBuyOrderCount_: BigNumberish,
      takeSellOrderCount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setServiceFeeRate(
      _serviceFeeAddr: string,
      _serviceFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenRoyaltyRate(
      contractAddr: string,
      royaltyRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeBatchBuyOrder(
      buyIndexList: BigNumberish[],
      tokenList: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeBatchSellOrder(
      sellIndexList: BigNumberish[],
      tokenList: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelBatchBuyOrder(
      buyIndexList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelBatchSellOrder(
      sellIndexList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cname(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentBuyIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentSellIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    makeBatchBuyOrder(
      tokens: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeBatchSellOrder(
      tokens: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    matchBatchOrder(
      buyIndexList: BigNumberish[],
      sellIndexList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    matchOrder(
      buyIndex: BigNumberish,
      sellIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      channel: BigNumberish,
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBatchOrderCount(
      batchBuyOrderCount_: BigNumberish,
      batchSellOrderCount_: BigNumberish,
      cancelBuyOrderCount_: BigNumberish,
      cancelSellOrderCount_: BigNumberish,
      takeBuyOrderCount_: BigNumberish,
      takeSellOrderCount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setServiceFeeRate(
      _serviceFeeAddr: string,
      _serviceFeeRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenRoyaltyRate(
      contractAddr: string,
      royaltyRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeBatchBuyOrder(
      buyIndexList: BigNumberish[],
      tokenList: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeBatchSellOrder(
      sellIndexList: BigNumberish[],
      tokenList: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
