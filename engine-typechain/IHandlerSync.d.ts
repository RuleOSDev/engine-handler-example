/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IHandlerSyncInterface extends ethers.utils.Interface {
  functions: {
    "canSync(bytes32)": FunctionFragment;
    "getSyncHash(uint256)": FunctionFragment;
    "getSyncHashList(uint256,uint256)": FunctionFragment;
    "getSyncHashListAll()": FunctionFragment;
    "getSyncHashListLength()": FunctionFragment;
    "sync(bytes32,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "canSync", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getSyncHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSyncHashList",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSyncHashListAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSyncHashListLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sync",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "canSync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSyncHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSyncHashList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSyncHashListAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSyncHashListLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;

  events: {};
}

export class IHandlerSync extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IHandlerSyncInterface;

  functions: {
    canSync(hash: BytesLike, overrides?: CallOverrides): Promise<[number]>;

    getSyncHash(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSyncHashList(
      beginIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getSyncHashListAll(overrides?: CallOverrides): Promise<[string[]]>;

    getSyncHashListLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    sync(
      hash: BytesLike,
      stepCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  canSync(hash: BytesLike, overrides?: CallOverrides): Promise<number>;

  getSyncHash(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getSyncHashList(
    beginIndex: BigNumberish,
    endIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getSyncHashListAll(overrides?: CallOverrides): Promise<string[]>;

  getSyncHashListLength(overrides?: CallOverrides): Promise<BigNumber>;

  sync(
    hash: BytesLike,
    stepCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    canSync(hash: BytesLike, overrides?: CallOverrides): Promise<number>;

    getSyncHash(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getSyncHashList(
      beginIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getSyncHashListAll(overrides?: CallOverrides): Promise<string[]>;

    getSyncHashListLength(overrides?: CallOverrides): Promise<BigNumber>;

    sync(
      hash: BytesLike,
      stepCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    canSync(hash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getSyncHash(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSyncHashList(
      beginIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSyncHashListAll(overrides?: CallOverrides): Promise<BigNumber>;

    getSyncHashListLength(overrides?: CallOverrides): Promise<BigNumber>;

    sync(
      hash: BytesLike,
      stepCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    canSync(
      hash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSyncHash(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSyncHashList(
      beginIndex: BigNumberish,
      endIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSyncHashListAll(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSyncHashListLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sync(
      hash: BytesLike,
      stepCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
