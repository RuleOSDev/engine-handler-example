/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ExchangeInterface extends ethers.utils.Interface {
  functions: {
    "batchBuyOrderCount()": FunctionFragment;
    "batchSellOrderCount()": FunctionFragment;
    "buyOrders(uint256)": FunctionFragment;
    "cancelBatchBuyOrder(uint256[])": FunctionFragment;
    "cancelBatchSellOrder(uint256[])": FunctionFragment;
    "cancelBuyOrderCount()": FunctionFragment;
    "cancelSellOrderCount()": FunctionFragment;
    "cname()": FunctionFragment;
    "currentBuyIndex()": FunctionFragment;
    "currentSellIndex()": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "makeBatchBuyOrder(tuple[])": FunctionFragment;
    "makeBatchSellOrder(tuple[])": FunctionFragment;
    "matchBatchOrder(uint256[],uint256[])": FunctionFragment;
    "matchOrder(uint256,uint256)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause(uint8,bool)": FunctionFragment;
    "paused(uint8)": FunctionFragment;
    "poolContract()": FunctionFragment;
    "poolToken()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sellOrders(uint256)": FunctionFragment;
    "serviceFeeAddress()": FunctionFragment;
    "serviceFeeRate()": FunctionFragment;
    "setBatchOrderCount(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setServiceFeeRate(address,uint256)": FunctionFragment;
    "setTokenRoyaltyRate(address,uint256)": FunctionFragment;
    "takeBatchBuyOrder(uint256[],tuple[])": FunctionFragment;
    "takeBatchSellOrder(uint256[],tuple[])": FunctionFragment;
    "takeBuyOrderCount()": FunctionFragment;
    "takeSellOrderCount()": FunctionFragment;
    "tokenRoyaltyRate(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "version()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "batchBuyOrderCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchSellOrderCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyOrders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBatchBuyOrder",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBatchSellOrder",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBuyOrderCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelSellOrderCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cname", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "currentBuyIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentSellIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "makeBatchBuyOrder",
    values: [
      {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "makeBatchSellOrder",
    values: [
      {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "matchBatchOrder",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "matchOrder",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pause",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "paused",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellOrders",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "serviceFeeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "serviceFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBatchOrderCount",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setServiceFeeRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenRoyaltyRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "takeBatchBuyOrder",
    values: [
      BigNumberish[],
      {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "takeBatchSellOrder",
    values: [
      BigNumberish[],
      {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "takeBuyOrderCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "takeSellOrderCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenRoyaltyRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "batchBuyOrderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSellOrderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelBatchBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelBatchSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelBuyOrderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelSellOrderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cname", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentBuyIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentSellIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeBatchBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeBatchSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchBatchOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "matchOrder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "serviceFeeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serviceFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBatchOrderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setServiceFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenRoyaltyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeBatchBuyOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeBatchSellOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeBuyOrderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "takeSellOrderCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenRoyaltyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Buy(tuple,uint256)": EventFragment;
    "CancelBuy(tuple,uint256)": EventFragment;
    "CancelSell(tuple,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MatchOrder(tuple,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(uint8,address)": EventFragment;
    "Sell(tuple,uint256)": EventFragment;
    "SetServiceFeeRate(address,uint256)": EventFragment;
    "SetTokenRoyaltyRate(address,uint256)": EventFragment;
    "TakeBuy(tuple,uint256,tuple)": EventFragment;
    "TakeSell(tuple,uint256,tuple)": EventFragment;
    "TransferValues(uint256,address,uint256,uint256,address,address,uint256,uint256,address,uint256)": EventFragment;
    "Unpaused(uint8,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Buy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelBuy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelSell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MatchOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetServiceFeeRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenRoyaltyRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeBuy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakeSell"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferValues"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type BuyEvent = TypedEvent<
  [
    [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    },
    BigNumber
  ] & {
    token: [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    };
    buyIndex: BigNumber;
  }
>;

export type CancelBuyEvent = TypedEvent<
  [
    [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    },
    BigNumber
  ] & {
    token: [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    };
    buyIndex: BigNumber;
  }
>;

export type CancelSellEvent = TypedEvent<
  [
    [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    },
    BigNumber
  ] & {
    token: [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    };
    sellIndex: BigNumber;
  }
>;

export type InitializedEvent = TypedEvent<[number] & { version: number }>;

export type MatchOrderEvent = TypedEvent<
  [
    [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    },
    BigNumber,
    BigNumber
  ] & {
    token: [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    };
    buyIndex: BigNumber;
    sellIndex: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<
  [number, string] & { channel: number; account: string }
>;

export type SellEvent = TypedEvent<
  [
    [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    },
    BigNumber
  ] & {
    token: [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    };
    sellIndex: BigNumber;
  }
>;

export type SetServiceFeeRateEvent = TypedEvent<
  [string, BigNumber] & { serviceFeeAddr: string; serviceFeeRate: BigNumber }
>;

export type SetTokenRoyaltyRateEvent = TypedEvent<
  [string, BigNumber] & { token: string; royaltyRate: BigNumber }
>;

export type TakeBuyEvent = TypedEvent<
  [
    [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    },
    BigNumber,
    [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    }
  ] & {
    orderToken: [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    };
    buyIndex: BigNumber;
    token: [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    };
  }
>;

export type TakeSellEvent = TypedEvent<
  [
    [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    },
    BigNumber,
    [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    }
  ] & {
    orderToken: [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    };
    sellIndex: BigNumber;
    token: [number, string, BigNumber, BigNumber, BigNumber] & {
      erc: number;
      token: string;
      id: BigNumber;
      amount: BigNumber;
      price: BigNumber;
    };
  }
>;

export type TransferValuesEvent = TypedEvent<
  [
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber
  ] & {
    tokenPrice: BigNumber;
    serviceFeeAddress: string;
    serviceFeeRate: BigNumber;
    serviceFee: BigNumber;
    token: string;
    deployer: string;
    royaltyRate: BigNumber;
    royalty: BigNumber;
    receiver: string;
    receiverTokenPrice: BigNumber;
  }
>;

export type UnpausedEvent = TypedEvent<
  [number, string] & { channel: number; account: string }
>;

export class Exchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ExchangeInterface;

  functions: {
    batchBuyOrderCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    batchSellOrderCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    buyOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        string,
        BigNumber,
        BigNumber,
        number
      ] & {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        owner: string;
        createTime: BigNumber;
        dealTime: BigNumber;
        deal: number;
      }
    >;

    cancelBatchBuyOrder(
      buyIndexList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelBatchSellOrder(
      sellIndexList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelBuyOrderCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancelSellOrderCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    cname(overrides?: CallOverrides): Promise<[string]>;

    currentBuyIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentSellIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      poolContract_: string,
      poolToken_: string,
      serviceFeeAddress_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeBatchBuyOrder(
      tokens: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeBatchSellOrder(
      tokens: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    matchBatchOrder(
      buyIndexList: BigNumberish[],
      sellIndexList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    matchOrder(
      buyIndex: BigNumberish,
      sellIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      channel: BigNumberish,
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(
      channel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    poolContract(overrides?: CallOverrides): Promise<[string]>;

    poolToken(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        string,
        BigNumber,
        BigNumber,
        number
      ] & {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        owner: string;
        createTime: BigNumber;
        dealTime: BigNumber;
        deal: number;
      }
    >;

    serviceFeeAddress(overrides?: CallOverrides): Promise<[string]>;

    serviceFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBatchOrderCount(
      _batchBuyOrderCount: BigNumberish,
      _batchSellOrderCount: BigNumberish,
      _cancelBuyOrderCount: BigNumberish,
      _cancelSellOrderCount: BigNumberish,
      _takeBuyOrderCount: BigNumberish,
      _takeSellOrderCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setServiceFeeRate(
      serviceFeeAddr_: string,
      serviceFeeRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTokenRoyaltyRate(
      token: string,
      royaltyRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeBatchBuyOrder(
      buyIndexList: BigNumberish[],
      tokenList: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeBatchSellOrder(
      sellIndexList: BigNumberish[],
      tokenList: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeBuyOrderCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    takeSellOrderCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenRoyaltyRate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  batchBuyOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

  batchSellOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

  buyOrders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [number, string, BigNumber, BigNumber, BigNumber] & {
        erc: number;
        token: string;
        id: BigNumber;
        amount: BigNumber;
        price: BigNumber;
      },
      string,
      BigNumber,
      BigNumber,
      number
    ] & {
      token: [number, string, BigNumber, BigNumber, BigNumber] & {
        erc: number;
        token: string;
        id: BigNumber;
        amount: BigNumber;
        price: BigNumber;
      };
      owner: string;
      createTime: BigNumber;
      dealTime: BigNumber;
      deal: number;
    }
  >;

  cancelBatchBuyOrder(
    buyIndexList: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelBatchSellOrder(
    sellIndexList: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelBuyOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

  cancelSellOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

  cname(overrides?: CallOverrides): Promise<string>;

  currentBuyIndex(overrides?: CallOverrides): Promise<BigNumber>;

  currentSellIndex(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    poolContract_: string,
    poolToken_: string,
    serviceFeeAddress_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeBatchBuyOrder(
    tokens: {
      erc: BigNumberish;
      token: string;
      id: BigNumberish;
      amount: BigNumberish;
      price: BigNumberish;
    }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeBatchSellOrder(
    tokens: {
      erc: BigNumberish;
      token: string;
      id: BigNumberish;
      amount: BigNumberish;
      price: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  matchBatchOrder(
    buyIndexList: BigNumberish[],
    sellIndexList: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  matchOrder(
    buyIndex: BigNumberish,
    sellIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multicall(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    operator: string,
    from: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC1155Received(
    operator: string,
    from: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    channel: BigNumberish,
    _paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(channel: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  poolContract(overrides?: CallOverrides): Promise<string>;

  poolToken(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellOrders(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      [number, string, BigNumber, BigNumber, BigNumber] & {
        erc: number;
        token: string;
        id: BigNumber;
        amount: BigNumber;
        price: BigNumber;
      },
      string,
      BigNumber,
      BigNumber,
      number
    ] & {
      token: [number, string, BigNumber, BigNumber, BigNumber] & {
        erc: number;
        token: string;
        id: BigNumber;
        amount: BigNumber;
        price: BigNumber;
      };
      owner: string;
      createTime: BigNumber;
      dealTime: BigNumber;
      deal: number;
    }
  >;

  serviceFeeAddress(overrides?: CallOverrides): Promise<string>;

  serviceFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  setBatchOrderCount(
    _batchBuyOrderCount: BigNumberish,
    _batchSellOrderCount: BigNumberish,
    _cancelBuyOrderCount: BigNumberish,
    _cancelSellOrderCount: BigNumberish,
    _takeBuyOrderCount: BigNumberish,
    _takeSellOrderCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setServiceFeeRate(
    serviceFeeAddr_: string,
    serviceFeeRate_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTokenRoyaltyRate(
    token: string,
    royaltyRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeBatchBuyOrder(
    buyIndexList: BigNumberish[],
    tokenList: {
      erc: BigNumberish;
      token: string;
      id: BigNumberish;
      amount: BigNumberish;
      price: BigNumberish;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeBatchSellOrder(
    sellIndexList: BigNumberish[],
    tokenList: {
      erc: BigNumberish;
      token: string;
      id: BigNumberish;
      amount: BigNumberish;
      price: BigNumberish;
    }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeBuyOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

  takeSellOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

  tokenRoyaltyRate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    batchBuyOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

    batchSellOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

    buyOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        string,
        BigNumber,
        BigNumber,
        number
      ] & {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        owner: string;
        createTime: BigNumber;
        dealTime: BigNumber;
        deal: number;
      }
    >;

    cancelBatchBuyOrder(
      buyIndexList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelBatchSellOrder(
      sellIndexList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    cancelBuyOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

    cancelSellOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

    cname(overrides?: CallOverrides): Promise<string>;

    currentBuyIndex(overrides?: CallOverrides): Promise<BigNumber>;

    currentSellIndex(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      poolContract_: string,
      poolToken_: string,
      serviceFeeAddress_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    makeBatchBuyOrder(
      tokens: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    makeBatchSellOrder(
      tokens: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchBatchOrder(
      buyIndexList: BigNumberish[],
      sellIndexList: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    matchOrder(
      buyIndex: BigNumberish,
      sellIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(
      channel: BigNumberish,
      _paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    paused(channel: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    poolContract(overrides?: CallOverrides): Promise<string>;

    poolToken(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sellOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        string,
        BigNumber,
        BigNumber,
        number
      ] & {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        owner: string;
        createTime: BigNumber;
        dealTime: BigNumber;
        deal: number;
      }
    >;

    serviceFeeAddress(overrides?: CallOverrides): Promise<string>;

    serviceFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    setBatchOrderCount(
      _batchBuyOrderCount: BigNumberish,
      _batchSellOrderCount: BigNumberish,
      _cancelBuyOrderCount: BigNumberish,
      _cancelSellOrderCount: BigNumberish,
      _takeBuyOrderCount: BigNumberish,
      _takeSellOrderCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setServiceFeeRate(
      serviceFeeAddr_: string,
      serviceFeeRate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenRoyaltyRate(
      token: string,
      royaltyRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    takeBatchBuyOrder(
      buyIndexList: BigNumberish[],
      tokenList: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    takeBatchSellOrder(
      sellIndexList: BigNumberish[],
      tokenList: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    takeBuyOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

    takeSellOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

    tokenRoyaltyRate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Buy(tuple,uint256)"(
      token?: null,
      buyIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        buyIndex: BigNumber;
      }
    >;

    Buy(
      token?: null,
      buyIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        buyIndex: BigNumber;
      }
    >;

    "CancelBuy(tuple,uint256)"(
      token?: null,
      buyIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        buyIndex: BigNumber;
      }
    >;

    CancelBuy(
      token?: null,
      buyIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        buyIndex: BigNumber;
      }
    >;

    "CancelSell(tuple,uint256)"(
      token?: null,
      sellIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        sellIndex: BigNumber;
      }
    >;

    CancelSell(
      token?: null,
      sellIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        sellIndex: BigNumber;
      }
    >;

    "Initialized(uint8)"(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    Initialized(
      version?: null
    ): TypedEventFilter<[number], { version: number }>;

    "MatchOrder(tuple,uint256,uint256)"(
      token?: null,
      buyIndex?: null,
      sellIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber,
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        buyIndex: BigNumber;
        sellIndex: BigNumber;
      }
    >;

    MatchOrder(
      token?: null,
      buyIndex?: null,
      sellIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber,
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        buyIndex: BigNumber;
        sellIndex: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(uint8,address)"(
      channel?: null,
      account?: null
    ): TypedEventFilter<[number, string], { channel: number; account: string }>;

    Paused(
      channel?: null,
      account?: null
    ): TypedEventFilter<[number, string], { channel: number; account: string }>;

    "Sell(tuple,uint256)"(
      token?: null,
      sellIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        sellIndex: BigNumber;
      }
    >;

    Sell(
      token?: null,
      sellIndex?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber
      ],
      {
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        sellIndex: BigNumber;
      }
    >;

    "SetServiceFeeRate(address,uint256)"(
      serviceFeeAddr?: string | null,
      serviceFeeRate?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { serviceFeeAddr: string; serviceFeeRate: BigNumber }
    >;

    SetServiceFeeRate(
      serviceFeeAddr?: string | null,
      serviceFeeRate?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { serviceFeeAddr: string; serviceFeeRate: BigNumber }
    >;

    "SetTokenRoyaltyRate(address,uint256)"(
      token?: string | null,
      royaltyRate?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; royaltyRate: BigNumber }
    >;

    SetTokenRoyaltyRate(
      token?: string | null,
      royaltyRate?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { token: string; royaltyRate: BigNumber }
    >;

    "TakeBuy(tuple,uint256,tuple)"(
      orderToken?: null,
      buyIndex?: null,
      token?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber,
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        }
      ],
      {
        orderToken: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        buyIndex: BigNumber;
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
      }
    >;

    TakeBuy(
      orderToken?: null,
      buyIndex?: null,
      token?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber,
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        }
      ],
      {
        orderToken: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        buyIndex: BigNumber;
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
      }
    >;

    "TakeSell(tuple,uint256,tuple)"(
      orderToken?: null,
      sellIndex?: null,
      token?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber,
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        }
      ],
      {
        orderToken: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        sellIndex: BigNumber;
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
      }
    >;

    TakeSell(
      orderToken?: null,
      sellIndex?: null,
      token?: null
    ): TypedEventFilter<
      [
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        },
        BigNumber,
        [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        }
      ],
      {
        orderToken: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
        sellIndex: BigNumber;
        token: [number, string, BigNumber, BigNumber, BigNumber] & {
          erc: number;
          token: string;
          id: BigNumber;
          amount: BigNumber;
          price: BigNumber;
        };
      }
    >;

    "TransferValues(uint256,address,uint256,uint256,address,address,uint256,uint256,address,uint256)"(
      tokenPrice?: BigNumberish | null,
      serviceFeeAddress?: null,
      serviceFeeRate?: BigNumberish | null,
      serviceFee?: null,
      token?: null,
      deployer?: null,
      royaltyRate?: BigNumberish | null,
      royalty?: null,
      receiver?: null,
      receiverTokenPrice?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ],
      {
        tokenPrice: BigNumber;
        serviceFeeAddress: string;
        serviceFeeRate: BigNumber;
        serviceFee: BigNumber;
        token: string;
        deployer: string;
        royaltyRate: BigNumber;
        royalty: BigNumber;
        receiver: string;
        receiverTokenPrice: BigNumber;
      }
    >;

    TransferValues(
      tokenPrice?: BigNumberish | null,
      serviceFeeAddress?: null,
      serviceFeeRate?: BigNumberish | null,
      serviceFee?: null,
      token?: null,
      deployer?: null,
      royaltyRate?: BigNumberish | null,
      royalty?: null,
      receiver?: null,
      receiverTokenPrice?: null
    ): TypedEventFilter<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        string,
        BigNumber
      ],
      {
        tokenPrice: BigNumber;
        serviceFeeAddress: string;
        serviceFeeRate: BigNumber;
        serviceFee: BigNumber;
        token: string;
        deployer: string;
        royaltyRate: BigNumber;
        royalty: BigNumber;
        receiver: string;
        receiverTokenPrice: BigNumber;
      }
    >;

    "Unpaused(uint8,address)"(
      channel?: null,
      account?: null
    ): TypedEventFilter<[number, string], { channel: number; account: string }>;

    Unpaused(
      channel?: null,
      account?: null
    ): TypedEventFilter<[number, string], { channel: number; account: string }>;
  };

  estimateGas: {
    batchBuyOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

    batchSellOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

    buyOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelBatchBuyOrder(
      buyIndexList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelBatchSellOrder(
      sellIndexList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelBuyOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

    cancelSellOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

    cname(overrides?: CallOverrides): Promise<BigNumber>;

    currentBuyIndex(overrides?: CallOverrides): Promise<BigNumber>;

    currentSellIndex(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      poolContract_: string,
      poolToken_: string,
      serviceFeeAddress_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeBatchBuyOrder(
      tokens: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeBatchSellOrder(
      tokens: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    matchBatchOrder(
      buyIndexList: BigNumberish[],
      sellIndexList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    matchOrder(
      buyIndex: BigNumberish,
      sellIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      channel: BigNumberish,
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(
      channel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolContract(overrides?: CallOverrides): Promise<BigNumber>;

    poolToken(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    serviceFeeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    serviceFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

    setBatchOrderCount(
      _batchBuyOrderCount: BigNumberish,
      _batchSellOrderCount: BigNumberish,
      _cancelBuyOrderCount: BigNumberish,
      _cancelSellOrderCount: BigNumberish,
      _takeBuyOrderCount: BigNumberish,
      _takeSellOrderCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setServiceFeeRate(
      serviceFeeAddr_: string,
      serviceFeeRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTokenRoyaltyRate(
      token: string,
      royaltyRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeBatchBuyOrder(
      buyIndexList: BigNumberish[],
      tokenList: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeBatchSellOrder(
      sellIndexList: BigNumberish[],
      tokenList: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeBuyOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

    takeSellOrderCount(overrides?: CallOverrides): Promise<BigNumber>;

    tokenRoyaltyRate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    batchBuyOrderCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchSellOrderCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelBatchBuyOrder(
      buyIndexList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelBatchSellOrder(
      sellIndexList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelBuyOrderCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelSellOrderCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cname(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentBuyIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    currentSellIndex(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      poolContract_: string,
      poolToken_: string,
      serviceFeeAddress_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeBatchBuyOrder(
      tokens: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeBatchSellOrder(
      tokens: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    matchBatchOrder(
      buyIndexList: BigNumberish[],
      sellIndexList: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    matchOrder(
      buyIndex: BigNumberish,
      sellIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      channel: BigNumberish,
      _paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(
      channel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellOrders(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    serviceFeeAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    serviceFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBatchOrderCount(
      _batchBuyOrderCount: BigNumberish,
      _batchSellOrderCount: BigNumberish,
      _cancelBuyOrderCount: BigNumberish,
      _cancelSellOrderCount: BigNumberish,
      _takeBuyOrderCount: BigNumberish,
      _takeSellOrderCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setServiceFeeRate(
      serviceFeeAddr_: string,
      serviceFeeRate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTokenRoyaltyRate(
      token: string,
      royaltyRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeBatchBuyOrder(
      buyIndexList: BigNumberish[],
      tokenList: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeBatchSellOrder(
      sellIndexList: BigNumberish[],
      tokenList: {
        erc: BigNumberish;
        token: string;
        id: BigNumberish;
        amount: BigNumberish;
        price: BigNumberish;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeBuyOrderCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takeSellOrderCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenRoyaltyRate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
